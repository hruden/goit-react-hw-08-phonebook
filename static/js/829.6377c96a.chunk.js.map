{"version":3,"file":"static/js/829.6377c96a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Layout/Layout.styled.js","components/UserMenu/UserMenu.jsx","components/Layout/Layout.jsx","components/Pages/Home.js"],"sourcesContent":["import styled from 'styled-components';\nexport const FormFoneBook = styled.form`\n    display: flex;\n    flex-direction: column;\n    border: 1px solid black;\n    width: 400px;\n    padding: 15px;\n    margin-bottom: 15px;\n    gap: 5px;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    `\nexport const InputFoneBook = styled.input`\n    width: 100%;\n    margin-bottom: 15px;\n    `\nexport const AddContactBtn = styled.button`\n    width: 200px;\n    &:hover{\n        background-color: #6495ED;\n        border-color: #6495ED;\n        color: white;\n    }\n`\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contactsBook.contacts;\nexport const selectFilter = state => state.contactsBook.filter;\nexport const selectIsLoadingContacts = state => state.contactsBook.isLoading;\nexport const selectErrorContacts = state => state.contactsBook.error;\n\nexport const getVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n     return contacts.filter(({name})=> name.toLowerCase()\n            .includes(filter.toLowerCase()))\n    }\n  )\n","import { useState } from 'react';\nimport {\n  AddContactBtn,\n  FormFoneBook,\n  InputFoneBook,\n} from './ContactForm.styled';\nimport Spinner from 'react-bootstrap/Spinner';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { selectContacts, selectIsLoadingContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts)\n  const isLoading = useSelector(selectIsLoadingContacts)\n\n  const dispatch = useDispatch();\n\n  const handChange = ({ target }) => {\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n      case 'number':\n        setNumber(target.value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      name: name,\n      number: number,\n      // id: nanoid()\n      }\n      const nameCheck = contacts.find(({name})=> name === newContact.name)\n      if(nameCheck){\n        alert(`${newContact.name} is already in contacts`)\n        return reset()\n      }\n      // addContact(newContact)\n    dispatch(\n      addContact(newContact)\n    );\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <FormFoneBook onSubmit={handleSubmit}>\n      Name\n      <InputFoneBook\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-ЯІіЇїҐґ' \\-\\u0400-\\u04FF]+$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handChange}\n        value={name}\n      />\n      Number\n      <InputFoneBook\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"^[+]?[0-9\\\\.\\\\-\\\\s]{1,15}$\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handChange}\n        value={number}\n      />\n      {isLoading? <Spinner animation=\"grow\" variant=\"primary\"/>:<AddContactBtn type=\"submit\">add Contact</AddContactBtn>}\n    </FormFoneBook>\n  );\n}\n\nContactForm.propTypes = {\n  createContact: PropTypes.func,\n};\n","import styled from 'styled-components';\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const  ContactsBook = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 15px 5px;\n    width: 400px;\n`\nexport const ContactsItem = styled.li`\n    position: relative;\n    display: flex;\n    align-items: center;\n    &::before{\n        content: '';\n        width: 3px;\n        height: 3px;\n        border: 1px solid black;\n        border-radius: 50%;\n        background-color: black;\n        margin-right: 5px;\n    }\n`\nexport const DeleteContact = styled.button`\n    margin-left: auto;\n    &:hover{\n        border-color: #DC143C;\n        background-color: #DC143C;\n        color: white;\n    }\n`\nexport const DeleteSpinner = styled(Spinner)`\n    margin-left: auto;\n`","import { ContactsBook, ContactsItem, DeleteContact, DeleteSpinner } from \"./ContactList.styled\"\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { getVisibleContacts, selectIsLoadingContacts } from \"redux/contacts/selectors\";\n\n\nexport const ContactList = () => {\n    const dispatch = useDispatch()\n    const isLoading = useSelector(selectIsLoadingContacts)\n    const contactsList = useSelector(getVisibleContacts)\n// if(isFetching){\n//     return <div>...loading</div>\n// }\n\n    return (\n        <ContactsBook>\n            {contactsList.map(({id, name, number}) => \n                <ContactsItem key={id}>{name}: {number}\n                    {isLoading? <DeleteSpinner animation=\"border\" variant=\"danger\"/>:<DeleteContact onClick={()=>dispatch(deleteContact(id))}>Delete</DeleteContact>}\n                </ContactsItem>            \n            )}\n        </ContactsBook>\n    )\n\n// if(isError){\n//     return(<div>{error.message}</div>)\n// }\n}\n    \n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string,\n            number: PropTypes.string,\n        })\n    ),\n    removeContact: PropTypes.func\n}\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/slice';\nexport const Filter = () => {\n  const filter = useSelector(selectFilter)\n  const dispatch = useDispatch();\n\n\n\n  const handleFind = ({ target }) => {\n    const normalizedValue = target.value.trim().toLocaleLowerCase();\n    dispatch(filterContacts(normalizedValue));\n  };\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        onChange={handleFind}\n        value={filter}\n        name=\"searchContact\"\n        type=\"text\"\n        placeholder=\"Search contact...\"\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  searchContact: PropTypes.string,\n  handleFind: PropTypes.func,\n};\n","import styled from 'styled-components';\nimport Alert from 'react-bootstrap/Alert';\n\nexport const Container = styled.div`\n    padding: 30px;\n`\nexport const NotFoundAlert = styled(Alert)`\n    margin-top: 15px;\n    width: 400px;\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { logOut } from \"redux/auth/operations\";\nimport { selectUser } from \"redux/auth/selectors\";\n\nexport function UserMenu() {\n    const {name} = useSelector(selectUser)\n    const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>{name}</p>\n      <button type=\"button\" onClick={() => dispatch(logOut())}>Logout</button>\n    </div>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { NotFoundAlert, Container } from './Layout.styled';\nimport { getVisibleContacts } from 'redux/contacts/selectors';\nimport { UserMenu } from 'components/UserMenu/UserMenu';\n\n\nexport default function Layout() {\n  const contactsList = useSelector(getVisibleContacts)\n    \n    return (\n        <Container>\n        <h1>Phonebook</h1>\n        <ContactForm/>\n\n        <h2>Contacts</h2>\n        <Filter/>\n        { contactsList.length ? <ContactList />\n        : (<NotFoundAlert variant='dark'>No matches found!</NotFoundAlert>)} \n        <UserMenu/>\n      </Container>\n    );\n  }","import Layout from \"components/Layout/Layout\";\n\nexport default function Home() {\n    return (\n      <div>\n        <Layout />\n      </div>\n    );\n  }"],"names":["FormFoneBook","styled","_templateObject","_taggedTemplateLiteral","InputFoneBook","_templateObject2","AddContactBtn","_templateObject3","selectContacts","state","contactsBook","contacts","selectFilter","filter","selectIsLoadingContacts","isLoading","getVisibleContacts","createSelector","_ref","name","toLowerCase","includes","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","handChange","target","value","reset","_jsxs","onSubmit","e","preventDefault","newContact","find","_ref2","alert","concat","addContact","children","_jsx","type","pattern","title","required","onChange","Spinner","animation","variant","ContactsBook","ContactsItem","DeleteContact","DeleteSpinner","_templateObject4","ContactList","contactsList","map","id","onClick","deleteContact","Filter","_Fragment","normalizedValue","trim","toLocaleLowerCase","filterContacts","placeholder","Container","NotFoundAlert","Alert","UserMenu","selectUser","logOut","Layout","length","Home"],"sourceRoot":""}