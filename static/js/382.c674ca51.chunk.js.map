{"version":3,"file":"static/js/382.c674ca51.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","components/Pages/Register.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { useState } from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\n\nimport { NavLink } from 'react-router-dom';\nimport { selectError} from 'redux/auth/selectors';\nimport { toast } from 'react-toastify';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const isError = useSelector(selectError);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const nameHandler = e => {\n    setName(e.target.value.trim());\n  };\n  const emailHandler = e => {\n    setEmail(e.target.value.trim());\n  };\n  const passwordHandler = e => {\n    setPassword(e.target.value.trim());\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // const form = e.currentTarget;\n    if (password.length <= 7) {\n      toast.error('Password length must be 8 or more symbols');\n      return;\n    }\n    const newUser = { name, email, password };\n    try {\n      await dispatch(register(newUser));\n      if(isError){\n        toast.error('User with that email or password is already exist');\n          return;\n      }\n      if(!isError){\n        toast.success('Register successfull')\n        return\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    // form.reset();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter Username\"\n            value={name}\n            onChange={nameHandler}\n            required\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter email\"\n            value={email}\n            onChange={emailHandler}\n            required\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={passwordHandler}\n            required\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Sing up\n        </Button>\n      </Form>\n      <Card.Text>\n        Already have an account?\n        <NavLink to=\"/login\"> Log In</NavLink>\n      </Card.Text>\n    </>\n  );\n};\n","import { RegisterForm } from \"components/RegisterForm/RegisterForm\";\n\n\nexport default function Register() {\n    return (\n      <div>\n        <RegisterForm />\n      </div>\n    );\n  }"],"names":["RegisterForm","_ref","dispatch","useDispatch","isError","useSelector","selectError","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_jsxs","_Fragment","children","Form","onSubmit","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","newUser","wrap","_context","prev","next","preventDefault","length","toast","abrupt","register","t0","console","log","stop","apply","arguments","className","controlId","_jsx","type","placeholder","value","onChange","target","trim","required","Button","variant","Card","NavLink","to","Register"],"sourceRoot":""}